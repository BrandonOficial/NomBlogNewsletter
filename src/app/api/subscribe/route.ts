import { NextRequest, NextResponse } from "next/server";
import { NewsletterService } from "@/lib/newsletter-service";
import { newsletterSubscriptionSchema } from "@/lib/validators";
import { sendEmailWithResend } from "@/lib/email";

/**
 * Handler para inscri√ß√£o na newsletter
 * Segue princ√≠pios de Clean Code com valida√ß√£o e tratamento de erros
 */
export async function POST(request: NextRequest): Promise<NextResponse> {
  try {
    // Parse e valida√ß√£o do corpo da requisi√ß√£o
    const body = await request.json();
    const validationResult = newsletterSubscriptionSchema.safeParse(body);

    if (!validationResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: "Dados inv√°lidos",
          details: validationResult.error.issues,
        },
        { status: 400 }
      );
    }

    const { email, source } = validationResult.data;

    // Verifica se o email j√° est√° inscrito
    const isAlreadySubscribed =
      await NewsletterService.isEmailSubscribed(email);
    if (isAlreadySubscribed) {
      return NextResponse.json(
        {
          success: false,
          error: "Este email j√° est√° inscrito na newsletter",
        },
        { status: 409 }
      );
    }

    // Cria a inscri√ß√£o no banco de dados
    const subscriptionResult = await NewsletterService.createSubscription({
      email,
      source,
    });

    if (!subscriptionResult.success) {
      return NextResponse.json(
        {
          success: false,
          error: subscriptionResult.error || "Erro ao criar inscri√ß√£o",
        },
        { status: 500 }
      );
    }

    // Envia email de confirma√ß√£o
    try {
      await sendEmailWithResend({
        to: email,
        subject: "Bem-vindo √† nossa Newsletter!",
        html: `
          <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
            <h2 style="color: #333;">üéâ Inscri√ß√£o Confirmada!</h2>
            <p>Ol√°! Sua inscri√ß√£o na nossa newsletter foi realizada com sucesso.</p>
            <p>A partir de agora voc√™ receber√° nossas atualiza√ß√µes e conte√∫dos exclusivos.</p>
            <p>Obrigado por se juntar a n√≥s!</p>
            <hr style="margin: 20px 0;">
            <p style="font-size: 12px; color: #666;">
              Se voc√™ n√£o solicitou esta inscri√ß√£o, pode ignorar este email.
            </p>
          </div>
        `,
      });
    } catch (emailError) {
      console.error("Erro ao enviar email de confirma√ß√£o:", emailError);
      // N√£o falha a inscri√ß√£o se o email n√£o puder ser enviado
    }

    return NextResponse.json(
      {
        success: true,
        message: "Inscri√ß√£o realizada com sucesso!",
        data: subscriptionResult.data,
      },
      { status: 201 }
    );
  } catch (error) {
    console.error("Erro interno na API de inscri√ß√£o:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Erro interno do servidor",
      },
      { status: 500 }
    );
  }
}

/**
 * Handler para listar inscri√ß√µes (apenas para desenvolvimento)
 */
export async function GET(): Promise<NextResponse> {
  // Em produ√ß√£o, esta rota deveria ser protegida
  if (process.env.NODE_ENV === "production") {
    return NextResponse.json(
      { success: false, error: "M√©todo n√£o permitido" },
      { status: 405 }
    );
  }

  try {
    const subscriptions = await NewsletterService.getActiveSubscriptions();
    return NextResponse.json({
      success: true,
      data: subscriptions,
    });
  } catch (error) {
    console.error("Erro ao buscar inscri√ß√µes:", error);
    return NextResponse.json(
      {
        success: false,
        error: "Erro ao buscar inscri√ß√µes",
      },
      { status: 500 }
    );
  }
}
